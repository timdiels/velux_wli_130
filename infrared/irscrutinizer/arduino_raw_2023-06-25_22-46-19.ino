// This Arduino sketch was automatically generated by IrScrutinizer.

// It supports:
//
// * IRremote https://github.com/Arduino-IRremote/Arduino-IRremote
// * IRLib    https://github.com/cyborg5/IRLib
// * Infrared4Arduino https://github.com/bengtmartensson/Infrared4Arduino,
//                    http://www.harctoolbox.org/Infrared4Arduino.html

// For problems, bugs, and suggestions, please open an issue at
// https://github.com/bengtmartensson/IrScrutinizer/issues

// This file contains C identifiers which have been translated from command names.
// Under some circumstances, these may clash with predefined variables.

// Define exactly one of these
// #define IRREMOTE
// #define IRLIB
#define INFRARED4ARDUINO

/////////////////////////////////////////////////////
// Sanity check
#if defined(IRREMOTE) + defined(IRLIB) + defined(INFRARED4ARDUINO) != 1
#error Must define exactly only one of IRREMOTE, IRLIB, or INFRARED4ARDUINO
#endif

#ifdef IRREMOTE
#include <IRremote.h>
#elif defined(IRLIB)
#include <IRLib.h>
#define sendRaw send
#elif defined(INFRARED4ARDUINO)
#include <IrSenderPwm.h>
#else
#error Must defined one of IRREMOTE, IRLIB, or INFRARED4ARDUINO
#endif

#if defined(IRREMOTE) | defined(IRLIB)
typedef uint16_t microseconds_t; // Change if desired
typedef uint16_t frequency_t;    // Change if desired

static inline unsigned hz2khz(frequency_t f) { return f/1000U; }

// IRremote and IRLib does not have HAS_FLASH_READ or similar.
// As a first guess, use defined(ARDUINO_ARCH_AVR).
// Change if desired.
#define HAS_FLASH_READ defined(ARDUINO_ARCH_AVR)
#endif

// Infrared4Arduino already defines HAS_FLASH_READ, architecture dependant.
// Feel free to override if you think that is a good idea.

#if ! HAS_FLASH_READ
#define PROGMEM /* nothing */
#endif

// Constants
static const long BAUD = 115200UL; // Change if desired

// Global variables
#ifdef IRREMOTE
IRsend irsend;
#elif defined(IRLIB)
IRsendRaw irsend;
#else
IrSender *irsend = IrSenderPwm::getInstance(true);
#endif


// Command #1: m2&#134;
const microseconds_t repeat_m2_[] PROGMEM = { 1245U, 373U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 19201U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 65535U };

// Command #2: M3&#134;
const microseconds_t repeat_M3_[] PROGMEM = { 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 1245U, 19201U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 1245U, 65535U };

// Command #3: M1 - UP Auto
const microseconds_t repeat_M1___UP_Auto[] PROGMEM = { 436U, 1214U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 20042U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 65535U };

// Command #4: M2 Down Manual
const microseconds_t repeat_M2_Down_Manual[] PROGMEM = { 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 20011U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 65535U };

// Command #5: M3 Down Auto
const microseconds_t repeat_M3_Down_Auto[] PROGMEM = { 436U, 1214U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 20042U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 65535U };

// Command #6: M3 Down Manual
const microseconds_t repeat_M3_Down_Manual[] PROGMEM = { 1245U, 373U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 436U, 20042U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 436U, 65535U };

// Command #7: M2 - Down Auto
const microseconds_t repeat_M2___Down_Auto[] PROGMEM = { 436U, 1214U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 20011U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 65535U };

// Command #8: M1 - Down Auto
const microseconds_t repeat_M1___Down_Auto[] PROGMEM = { 436U, 1214U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 1245U, 19233U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 1245U, 65535U };

// Command #9: M1 Up Manual
const microseconds_t repeat_M1_Up_Manual[] PROGMEM = { 436U, 1214U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 436U, 20042U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 436U, 65535U };

// Command #10: m1&#134;
const microseconds_t repeat_m1_[] PROGMEM = { 1245U, 373U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 20042U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 65535U };

// Command #11: M3 Up Auto
const microseconds_t repeat_M3_Up_Auto[] PROGMEM = { 436U, 1214U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 19233U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 65535U };

// Command #12: M3 Up Manual
const microseconds_t repeat_M3_Up_Manual[] PROGMEM = { 436U, 1214U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 1245U, 19233U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 1245U, 65535U };

// Command #13: M2 Up Auto
const microseconds_t repeat_M2_Up_Auto[] PROGMEM = { 436U, 1214U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 1245U, 19233U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 1245U, 65535U };

// Command #14: M1 Down Manual
const microseconds_t repeat_M1_Down_Manual[] PROGMEM = { 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 1245U, 19233U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 1245U, 65535U };

// Command #15: M2 up Manual
const microseconds_t repeat_M2_up_Manual[] PROGMEM = { 436U, 1214U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 1245U, 19233U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 436U, 1183U, 1245U, 373U, 1245U, 373U, 1245U, 373U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 436U, 1183U, 1245U, 373U, 1245U, 65535U };


static void sendRaw
#if HAS_FLASH_READ
(const microseconds_t intro_P[], size_t lengthIntro, const microseconds_t repeat_P[],
             size_t lengthRepeat, frequency_t frequency, unsigned times) {
    microseconds_t intro[lengthIntro];
    microseconds_t repeat[lengthRepeat];
    memcpy_PF(intro, (uint_farptr_t) intro_P, sizeof(microseconds_t) * lengthIntro);
    memcpy_PF(repeat, (uint_farptr_t) repeat_P, sizeof(microseconds_t) * lengthRepeat);
#else // ! HAS_FLASH_READ
(const microseconds_t intro[], size_t lengthIntro, const microseconds_t repeat[],
             size_t lengthRepeat, frequency_t frequency, unsigned times) {
#endif // ! HAS_FLASH_READ

#if defined(IRREMOTE) | defined(IRLIB)
    if (lengthIntro > 0U)
        irsend.sendRaw(intro, lengthIntro, hz2khz(frequency));
    if (lengthRepeat > 0U)
        for (unsigned i = 0U; i < times - (lengthIntro > 0U); i++)
            irsend.sendRaw(repeat, lengthRepeat, hz2khz(frequency));
#else // INFRARED4ARDUINO
    IrSignal irSignal(intro, lengthIntro, repeat, lengthRepeat, NULL, 0U, frequency);
    irsend->sendIrSignal(irSignal, times);
#endif
}

void setup() {
    Serial.begin(BAUD);
    Serial.setTimeout(60000UL);
}

// A pretty silly main loop; just intended as an example.
void loop() {
    Serial.println(F("Enter number of signal to send (1 .. 15)"));
    long commandno = Serial.parseInt();
    Serial.println(F("Enter number of times to send it"));
    long times = Serial.parseInt();
    switch (commandno) {
    case 1U:
        sendRaw(NULL, 0U, repeat_m2_, 96U, 32132U, times);
        break;
    case 2U:
        sendRaw(NULL, 0U, repeat_M3_, 96U, 32132U, times);
        break;
    case 3U:
        sendRaw(NULL, 0U, repeat_M1___UP_Auto, 96U, 32132U, times);
        break;
    case 4U:
        sendRaw(NULL, 0U, repeat_M2_Down_Manual, 96U, 32132U, times);
        break;
    case 5U:
        sendRaw(NULL, 0U, repeat_M3_Down_Auto, 96U, 32132U, times);
        break;
    case 6U:
        sendRaw(NULL, 0U, repeat_M3_Down_Manual, 96U, 32132U, times);
        break;
    case 7U:
        sendRaw(NULL, 0U, repeat_M2___Down_Auto, 96U, 32132U, times);
        break;
    case 8U:
        sendRaw(NULL, 0U, repeat_M1___Down_Auto, 96U, 32132U, times);
        break;
    case 9U:
        sendRaw(NULL, 0U, repeat_M1_Up_Manual, 96U, 32132U, times);
        break;
    case 10U:
        sendRaw(NULL, 0U, repeat_m1_, 96U, 32132U, times);
        break;
    case 11U:
        sendRaw(NULL, 0U, repeat_M3_Up_Auto, 96U, 32132U, times);
        break;
    case 12U:
        sendRaw(NULL, 0U, repeat_M3_Up_Manual, 96U, 32132U, times);
        break;
    case 13U:
        sendRaw(NULL, 0U, repeat_M2_Up_Auto, 96U, 32132U, times);
        break;
    case 14U:
        sendRaw(NULL, 0U, repeat_M1_Down_Manual, 96U, 32132U, times);
        break;
    case 15U:
        sendRaw(NULL, 0U, repeat_M2_up_Manual, 96U, 32132U, times);
        break;
    default:
        Serial.println(F("Invalid number entered, try again"));
        break;
    }
}
